/*!
@~chinese
@ingroup dtkio
@file dfilefuture.h

@namespace Dtk::IO::DFileFuture

@class Dtk::IO::DFileFuture dfilefuture.h
@brief 处理文件异步操作的结果

@fn DFileFuture::DFileFuture(QObject *parent)
@brief 构造函数
@param[in] parent 默认为空，用于内存管理

@fn IOErrorCode DFileFuture::error() const
@brief 获取异步操作的错误码
@return 错误码

@fn bool DFileFuture::hasError() const
@brief 检查异步操作是否出错
@return 如果无错返回 `IOErrorCode::NoError`, 反之返回其他错误码 

@fn void DFileFuture::setError(IOErrorCode error)
@brief 设置错误码

@fn void DFileFuture::finished()
@brief 文件异步操作结束的信号

@fn void DFileFuture::fileAttributeRequired(AttributeID id, const QVariant &value)
@brief 文件异步属性变化的信号
@param[out] id 文件属性的id
@param[out] value 文件属性值

@fn void DFileFuture::fileAttributeRequired(const QByteArray &key, const QVariant &value)
@brief 文件异步属性变化的信号
@param[out] key 文件属性的key
@param[out] value 文件属性值

@fn void DFileFuture::fileExistsStateRequired(const bool exists)
@brief 异步判断文件是否存在的状态信号
@param[out] exists 文件存在为true，反之则为false

@fn void DFileFuture::filePermissionsRequired(const Permissions permissions)
@brief 文件权限异步改变的信号
@param[out] permissions 文件的权限

@fn void DFileFuture::fileSizeRequired(const quint64 &size)
@brief 文件大小异步被改变的信号
@param[out] size 文件的大小

@fn void DFileFuture::dataReaded(const QByteArray &data)
@brief 数据异步读写完成的信号
@param[out] data 读取的文件的大小

@fn void DFileFuture::dataWrited(const qint64 &size)
@brief 数据异步写入完成的信号
@param[out] data 写入的文件的大小

*/
